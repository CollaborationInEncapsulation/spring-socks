servers:
  - description: Local
    url: 'http://localhost:5006'
  - url: 'https://sock-user.apps.pcfone.io'
    description: PCF One
  - url: 'https://sock-user.apps.cf.maki.lol'
    description: CF for K8s
components:
  schemas:
    CustomerResponse:
      title: CustomerResponse
      type: object
      properties:
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/CustomerAddressResponse'
        cards:
          type: array
          items:
            $ref: '#/components/schemas/CustomerCardResponse'
      x-tags:
        - Customer
    CustomerAddressResponse:
      title: CustomerAddressResponse
      type: object
      properties:
        addressId:
          type: string
          format: uuid
        number:
          type: string
        street:
          type: string
        city:
          type: string
        postcode:
          type: string
        country:
          type: string
      x-tags:
        - Customer
    CustomerCardResponse:
      title: CustomerCardResponse
      type: object
      properties:
        cardId:
          type: string
          format: uuid
        longNum:
          type: string
        expires:
          type: string
          format: date
        ccv:
          type: string
      x-tags:
        - Customer
    CustomerAddressCreateRequest:
      title: CustomerAddressCreateRequest
      type: object
      properties:
        number:
          type: string
        street:
          type: string
        city:
          type: string
        postcode:
          type: string
        country:
          type: string
      x-tags:
        - Customer
    CustomerCardCreateRequest:
      title: CustomerCardCreateRequest
      type: object
      properties:
        longNum:
          type: string
        expires:
          type: string
          format: date
        ccv:
          type: string
      x-tags:
        - Customer
    CustomerCreateRequest:
      title: CustomerCreateRequest
      type: object
      x-tags:
        - Customer
      properties:
        username:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        allowDuplicateEmail:
          type: boolean
          default: 'false'
info:
  contact: {}
  description: User API
  license:
    name: Apache 2.0
  title: 'Spring Sock Shop: User API'
  version: 0.1.0-SNAPSHOT
openapi: 3.0.1
paths:
  /cards:
    parameters: []
    get:
      summary: Get cards of a user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCardResponse'
      operationId: get-customer-cards-by-id
      description: Get cards of the logged-in user
      tags:
        - Card
    post:
      summary: Create a new card
      operationId: post-cards
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCardResponse'
      description: Create a new card
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCardCreateRequest'
      tags:
        - Customer
  /addresses:
    get:
      summary: Get addresses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAddressResponse'
      operationId: get-addresses
      description: Get addresses of the logged-in user
      tags:
        - Address
    post:
      summary: Create a new address
      operationId: post-addresses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAddressResponse'
      description: Create a new address
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerAddressCreateRequest'
      tags:
        - Customer
  /register:
    post:
      summary: Register a customer
      operationId: register
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
      description: Register a customer (an endpoint for backward-compatibility)
      tags:
        - Customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreateRequest'
  /me:
    get:
      summary: Get the logged-in user information
      tags:
        - Customer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
      operationId: get-me
      description: Get the logged-in user information
  /login:
    post:
      summary: Login
      operationId: login
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
              required: true
      description: Login (an endpoint for backward-compatibility)
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          required: true
      tags:
        - Customer
  '/customers/{customerId}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: customerId
        in: path
        required: true
    get:
      summary: Get a customer
      tags:
        - Customer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
      operationId: get-customer-by-customer-id
      description: Get a customer (an endpoint for backward-compatibility)
  '/customers/{customerId}/addresses':
    parameters:
      - schema:
          type: string
          format: uuid
        name: customerId
        in: path
        required: true
    get:
      summary: "Get customer's addresses"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerAddressResponse'
      operationId: get-addresses-by-customer-id
      description: "Get customer's addresses (an endpoint for backward-compatibility)"
      tags:
        - Address
  '/customers/{customerId}/cards':
    parameters:
      - schema:
          type: string
          format: uuid
        name: customerId
        in: path
        required: true
    get:
      summary: "Get customer's cards"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerCardResponse'
      operationId: get-cards-by-customer-id
      description: "Get customer's cards (an endpoint for backward-compatibility)"
      tags:
        - Card
  '/addresses/{addressId}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: addressId
        in: path
        required: true
    get:
      summary: Get an address
      tags:
        - Address
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAddressResponse'
      operationId: get-addresses-by-id
      description: Get an address of the logged-in user
  '/cards/{cardId}':
    parameters:
      - schema:
          type: string
          format: uuid
        name: cardId
        in: path
        required: true
    get:
      summary: Get a card
      tags:
        - Card
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCardResponse'
      operationId: get-cards-by-id
      description: Get a card of the logged-in user
